{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["countries","registerLocale","require","App","useState","apiData","setApiData","getState","setGetState","state","setState","apiUrl","process","useEffect","fetch","then","res","json","data","kelvinToFarenheit","k","toFixed","sunriseSunset","date","Date","getHours","getMinutes","substr","className","type","id","onChange","event","target","value","onClick","main","src","weather","icon","temp","name","getName","sys","country","select","faTemperatureLow","temp_min","faTemperatureHigh","temp_max","element","document","querySelector","currentDisplay","style","display","faWind","wind","speed","faTint","humidity","faSortDown","pressure","sunrise","sunset","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e44e378.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport countries from 'i18n-iso-countries';\n// import './reset.css';\n// const moment = require('moment-timezone');\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faWind,faTemperatureLow,faTemperatureHigh,faTint,faSortDown } from '@fortawesome/free-solid-svg-icons'\n\n\n\n\ncountries.registerLocale(require('i18n-iso-countries/langs/en.json'));\n\nfunction App() {\n  // State\n  const [apiData, setApiData] = useState({});\n  const [getState, setGetState] = useState('New York');\n  const [state, setState] = useState('New York');\n\n  // API KEY AND URL\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${state}&appid=${apiKey}`;\n\n  // Side effect\n  useEffect(() => {\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((data) => setApiData(data));\n  }, [apiUrl]);\n\n\n  const inputHandler = (event) => {\n    setGetState(event.target.value);\n  };\n\n  const submitHandler = () => {\n    setState(getState);\n  };\n\n  const kelvinToFarenheit = (k) => {\n    return ((k - 273.15) * 9/5 + 32).toFixed(0);\n  };\n\n  // debugger\n  const sunriseSunset = (data) => {\n    if (data){\n      let date = new Date(data * 1000)\n      var hours = date.getHours();\n      var minutes = \"0\" + date.getMinutes();\n\n      var formattedTime = hours + ':' + minutes.substr(-2)\n      return formattedTime\n    }\n  }\n\n  const showMore = () => {\n    let element = document.querySelector('.more-info');\n    let currentDisplay = document.querySelector('.more-info').style.display\n    if (currentDisplay === 'block'){\n      element.style.display = 'none'\n    }else{\n      element.style.display = 'block'\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>React Weather App</h2>\n      </header>\n      <div className='main-part'>\n        <div className='location-input'>\n          <div className='text'>\n            Enter location:\n          </div>\n          <div>\n            <input \n            type='text' id='location-name' onChange={inputHandler}\n            value={getState}\n            />\n          </div>\n          <button className='btn-location' onClick={submitHandler}>\n            Search\n          </button>\n        </div>\n\n        <div className='show-results'>\n          {apiData.main ? (\n            <div className='card-body'>\n              <img src={`http://openweathermap.org/img/w/${apiData.weather[0].icon}.png`}/>\n\n              <p className='h2'>\n                {kelvinToFarenheit(apiData.main.temp)}&deg; F\n              </p>\n\n              <p className=\"h5\">\n                <i className=\"fas fa-map-marker-alt\"></i>{' '}\n                <strong>{apiData.name}</strong>\n                <br/>\n                <strong>\n                    {' '}\n                    {countries.getName(apiData.sys.country, 'en', {\n                      select: 'official',\n                    })}\n                </strong>\n              </p>\n\n              <div>\n                <div>\n                  <p>\n                    <FontAwesomeIcon icon={faTemperatureLow} />&nbsp;\n                    Low: &nbsp;\n                    <strong>\n                      {kelvinToFarenheit(apiData.main.temp_min)}&deg; F\n                    </strong>\n                  </p>\n                  <p>\n                    <FontAwesomeIcon icon={faTemperatureHigh} />&nbsp;\n                    High: &nbsp;\n                    <strong>\n                      {kelvinToFarenheit(apiData.main.temp_max)}&deg; F\n                    </strong>\n                  </p>\n                </div>\n                <p>\n                  {' '}\n                  <strong>{apiData.weather[0].main}</strong>\n                </p>\n              </div>\n              <button onClick={showMore} style={{'margin': '7px'}}>Load/Hide More</button>\n              <div className='more-info'>\n                <hr/>\n\n                <p>\n                  <FontAwesomeIcon icon={faWind} />&nbsp;\n                  Wind: &nbsp; \n                  {(apiData.wind.speed * 2.236936).toFixed(1)} mph\n                  {/* {apiData.wind.deg} */}\n                </p>\n                <hr/>\n                <p>\n                  <FontAwesomeIcon icon={faTint} />&nbsp;\n                  Humidity: &nbsp;\n                  {apiData.main.humidity} &#37;\n                </p>\n                <hr/> \n                <p>\n                  <FontAwesomeIcon icon={faSortDown} />&nbsp;\n                  Pressure: &nbsp;\n                  {(apiData.main.pressure * 0.02953).toFixed(2)} in\n                </p>\n                <hr/>\n                <p>\n                  Sunrise: &nbsp;\n                  {sunriseSunset(apiData.sys.sunrise)}\n                  <br/>\n                  Sunset: &nbsp;\n                  {sunriseSunset(apiData.sys.sunset)}\n                </p>\n\n              </div>\n            </div>\n          ) : (\n            <h1>Loading</h1>\n          )}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}